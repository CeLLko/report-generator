/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.muni.fi.sbapr.gui.DataSourcePanels;

import cz.muni.fi.sbapr.gui.SlideEditDialog;
import cz.muni.fi.sbapr.gui.SlideElementEditDialog;
import cz.muni.fi.sbapr.gui.ParameterPanel;
import cz.muni.fi.sbapr.utils.IterableNodeList;
import cz.muni.fi.sbapr.utils.RGHelper;
import java.awt.Dialog;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BoxLayout;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

/**
 *
 * @author Adam
 */
public class DefaultDataSourcePanel extends DataSourcePanel {

    private List<ParameterPanel> nodePanels = new ArrayList<>();

    /**
     *
     * @return
     */
    public List<ParameterPanel> getNodePanels() {
        return nodePanels;
    }

    /**
     * Creates new form DefaultDataSourcePanel
     *
     * @param parent
     */
    public DefaultDataSourcePanel(Dialog parent) {
        super(parent);
        initComponents();
        panelNodes.setLayout(new BoxLayout(panelNodes, BoxLayout.Y_AXIS));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonAdd = new javax.swing.JButton();
        panelNodes = new javax.swing.JPanel();

        setMinimumSize(new java.awt.Dimension(280, 56));
        setPreferredSize(new java.awt.Dimension(280, 56));

        buttonAdd.setText("Add");
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });

        panelNodes.setMinimumSize(new java.awt.Dimension(260, 0));
        panelNodes.setPreferredSize(new java.awt.Dimension(260, 0));

        javax.swing.GroupLayout panelNodesLayout = new javax.swing.GroupLayout(panelNodes);
        panelNodes.setLayout(panelNodesLayout);
        panelNodesLayout.setHorizontalGroup(
            panelNodesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelNodesLayout.setVerticalGroup(
            panelNodesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelNodes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 219, Short.MAX_VALUE)
                        .addComponent(buttonAdd)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelNodes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonAdd)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        addNodePanel();
    }//GEN-LAST:event_buttonAddActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JPanel panelNodes;
    // End of variables declaration//GEN-END:variables

    private void addNodePanel() {
        ParameterPanel nodePanel = new ParameterPanel(this);
        panelNodes.add(nodePanel);
        nodePanels.add(nodePanel);
        resize();
    }

    private void addNodePanel(String name, String value) {
        ParameterPanel nodePanel = new ParameterPanel(this, name, value);
        panelNodes.add(nodePanel);
        nodePanels.add(nodePanel);
        resize();
    }

    /**
     *
     * @param nodePanel
     */
    public void removeNodePanel(ParameterPanel nodePanel) {
        nodePanels.remove(nodePanel);
        panelNodes.remove(nodePanel);
        resize();
    }

    /**
     *
     */
    public void resize() {
        setMinimumSize(new Dimension(280, 100 + nodePanels.size() * 30));
        setPreferredSize(new Dimension(getSize().width, getMinimumSize().height));
        ((SlideElementEditDialog) parent).setMinimumSize(new Dimension(320, getMinimumSize().height + 130));
        ((SlideElementEditDialog) parent).setPreferredSize(new Dimension(getSize().width+40, getMinimumSize().height));
        ((SlideElementEditDialog) parent).pack();
        revalidate();
    }

    /**
     *
     * @param element
     * @return
     */
    @Override
    public boolean updateElement(Element element) {
        new IterableNodeList(element.getChildNodes()).forEach(child -> element.removeChild(child));

        Document doc = RGHelper.INSTANCE.getDoc();
        nodePanels.stream()
                .filter(panel -> !panel.getName().isEmpty() && !panel.getValue().isEmpty())
                .forEach(panel -> {
                    Element childElement = doc.createElement(panel.getName());
                    childElement.appendChild(doc.createTextNode(panel.getValue()));
                    element.appendChild(childElement);
                });
        return true;
    }

    /**
     *
     * @param element
     */
    @Override
    public void loadElement(Element element) {
        new IterableNodeList(element.getChildNodes()).stream()
                .filter(child -> (child.getNodeType() == Node.ELEMENT_NODE))
                .forEach(child -> addNodePanel(child.getNodeName(), child.getTextContent()));
    }
}
